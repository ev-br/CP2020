{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1. Gaussian quadrature\n",
    "\n",
    "The Gaussian quadrature method is one of the methods of numerical integration that allows you to increase the accuracy of integration, by using orthogonal polynomials and their roots as nodes.\n",
    "\n",
    "$$\n",
    "\\int_a^b \\!  w(x)\\, f(x)\\, dx \\approx \\sum_{k=1}^n w_k \\, f(x_k) \\;,\n",
    "$$\n",
    "\n",
    "here $\\omega$ is the weight function, this weight function determines the basis of orthogonal polynomials whose roots are used as integration nodes. If the function $f(x)$ is a polynomial, then such an integration method gives *exact* value for the integral."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, let's calculate the following integral:\n",
    "$$\n",
    "\\int_{-1}^1 (7x^3 - 8 x^2 - 3 x + 3) dx  \\label{eq1}\\tag{1}\n",
    "$$\n",
    "\n",
    "Here function is already polynomial, so we put the weight function $\\omega(x) = 1$. Then the calculation of the integral reduces to the sum in the polynomials roots witch corresponding to the weight function $\\omega(x) = 1$. For example, here https://dlmf.nist.gov/18.3 you may see which basis of polynomials corresponds to your weight function.\n",
    "\n",
    "You may see, that Legendre polynomials correspond to our weight function. Now go to the documentation https://docs.scipy.org/doc/scipy/reference/special.html#orthogonal-polynomials. Here, the function *roots_legendre* immediately gives you the roots of the Legendre polynomial and weight at this roots (for Legendre polynomials all these weight are ones).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 1.1\n",
    "(20% of the grade)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Calculate the exact value of the integral ([1](#mjx-eqn-eq1)) using a pen and paper (or in your mind). Remember it, then you will compare numerical results with it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6666666666666666"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2/3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Calculate the value of the integral ([1](#mjx-eqn-eq1)) using the usual method of numerical integration on a uniform grid (for example, implemented by you in week_6_calculus homework). Estimate the number of nodes needed to achieve relative accuracy $10^{-10}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error = 0.10774410774410814   N =10^ 2\n",
      "Error = 0.010677344010677325   N =10^ 3\n",
      "Error = 0.0010667733440011817   N =10^ 4\n",
      "Error = 0.00010666773334400137   N =10^ 5\n",
      "Error = 1.0666677332404895e-05   N =10^ 6\n",
      "Error = 1.0666667762393445e-06   N =10^ 7\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy import integrate\n",
    "\n",
    "f = np.poly1d([7, -8, -3, 3])\n",
    "def IntByN(N):\n",
    "    return np.sum(np.polyval(f, np.linspace(-1,1,N)))*2/N\n",
    "\n",
    "for i in range(2,8):\n",
    "    print(\"Error =\", 2/3-IntByN(10**i), \"  N =10^\", i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наблюдаем линейную зависимость ошибки интегрирования от кол-ва равномерных разбиений"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Calculate the integral ([1](#mjx-eqn-eq1)) using the roots of the Legendre polynomial from 1 to 6 degrees as nodes (to get roots and weigths use scipy.special.roots_legendre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nodes = 1     I = 6.0\n",
      "nodes = 2     I = 0.6666666666666665\n",
      "nodes = 3     I = 0.6666666666666634\n",
      "nodes = 4     I = 0.6666666666666667\n",
      "nodes = 5     I = 0.6666666666666683\n",
      "nodes = 6     I = 0.6666666666666696\n"
     ]
    }
   ],
   "source": [
    "import scipy.special as sp\n",
    "for i in range(1,7):\n",
    "    x, w = sp.roots_legendre(i)\n",
    "    print(\"nodes =\", i,\"    I =\",sum(w*f(x)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the number of nodes needed to obtain the same accuracy in both numerical methods."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "И сравнивать нечего, с двух точек идеальная точность, в отличие от постепенной сходимости штатного разбиения"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 1.2\n",
    "(20% of the grade)\n",
    "\n",
    "Calculate the value of the same integral, but on the interval from 0 to 10.\n",
    "$$\n",
    "\\int_{0}^{10} (7x^3 - 8 x^2 - 3 x + 3) dx \n",
    "$$\n",
    "\n",
    "Please note that you can no longer directly use Legendre polynomials, because they are defined for the interval (-1,1). But you can always make an *affine transformation* (a transformation that does not change the area) in order to go to the desired coordinate system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14713.333333333332, 1.6336216726388104e-10)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate.quad(f, 0, 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Приведем интеграл к интервалу $[0, 1]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nodes = 1     I = 6630.0\n",
      "nodes = 2     I = 14713.333333333334\n",
      "nodes = 3     I = 14713.333333333336\n",
      "nodes = 4     I = 14713.33333333333\n",
      "nodes = 5     I = 14713.333333333332\n",
      "nodes = 6     I = 14713.333333333332\n"
     ]
    }
   ],
   "source": [
    "f_ = np.poly1d([70000, -8000, -300, 30])\n",
    "for i in range(1,7):\n",
    "    x1, w1 = sp.roots_sh_legendre(i)\n",
    "    print(\"nodes =\", i,\"    I =\",sum(w1*f_(x1)), )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the result with the exact value of the integral."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "И снова ответ быстро и идеально совпал"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 1.3\n",
    "(20% of the grade)\n",
    "\n",
    "Calculate the value of the following integral:\n",
    "$$\n",
    "\\int_{0}^{2\\pi} \\frac{cos(x) dx }{\\sqrt{4\\pi^2 - x^2}}\n",
    "$$\n",
    "by using the corresponding basis of orthogonal polynomials. \n",
    "Find the degree of the polynomial (number of nodes) at which the accuracy of the integral starts to exceed the double floating point accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Опять приводим интервал интегрирования к [0, 1] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nodes = 1     I = 1.5707963267948966\n",
      "nodes = 2     I = -0.4182329132681745\n",
      "nodes = 3     I = 1.2211694475711936\n",
      "nodes = 4     I = 0.11575359323141321\n",
      "nodes = 5     I = 0.37786106634872507\n",
      "nodes = 6     I = 0.34323498164389277\n",
      "nodes = 7     I = 0.34617799427660145\n",
      "nodes = 8     I = 0.3460026676271414\n",
      "nodes = 9     I = 0.34601041637332886\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,10):\n",
    "    x2 ,w2 = sp.roots_chebyt(i)\n",
    "    print(\"nodes =\", i,\"    I =\", sum(w2*np.cos(2*np.pi*x2)/2))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2. Fredholm equation\n",
    "\n",
    "There are two types of Fredholm equations. \n",
    "\n",
    "1. Fredholm equation of the first kind:\n",
    "$$\n",
    "\\int_a^b \\! K(x, t)\\, \\color{blue}{f(t)} \\,dt = g(x)\n",
    "$$\n",
    "\n",
    "2. Fredholm equation of the second kind:\n",
    "$$\n",
    "\\lambda \\int_a^b\\! K(x, t)\\, \\color{blue}{f(t)} \\, dt + g(x) = \\color{blue}{f(x)}\n",
    "$$\n",
    "\n",
    "Here higtlighted function $f(x)$ is unknown, kernel function $K(x, t)$ and given function $g(x)$, $\\lambda$ is a real number. Numerically, Fredholm equations of the first kind are very ill-conditioned. We will consider equations of the second kind only."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The basic idea is to approximate the integral by some quadrature formula\n",
    "\n",
    "$$\n",
    "\\int_a^b \\! \\xi(t)\\, dt \\approx \\sum_j^N w_j\\, \\xi(t_j)\n",
    "$$\n",
    "\n",
    "with appropriate weights $w_j$ and nodes $t_j$ and $j=1, \\dots, N$. The accuracy of the approximation is controlled by $N$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This way, the FE is approximated by \n",
    "\n",
    "$$\n",
    "\\lambda \\sum_j w_j\\, K(x, t_j)\\, \\color{blue}{f(t_j)} + g(x) = \\color{blue}{f(x)}\n",
    "$$\n",
    "\n",
    "Note that here $x$ is a continuous variable, and we only discretized $t$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluating this equation on the grid $x = t_k$, we obtain\n",
    "\n",
    "$$\n",
    "\\lambda \\sum_j w_j \\, K_{k, j}\\, \\color{blue}{f_j} + g_k = \\color{blue}{f_k}\n",
    "$$\n",
    "\n",
    "where $f_j \\equiv f(t_j)$, $g_j \\equiv g(t_j)$ and $K_{k, j} \\equiv K(t_k, t_j)$. This is nothing but a system of linear algebraic equations for the vector of $\\color{blue}{f_j}$.\n",
    "\n",
    "Its solution gives the values of the unknown function $f(x)$ at the discrete values $x=t_j$ for $j=1, \\dots, N$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2.1\n",
    "(20% of the grade)\n",
    "\n",
    "Solve an example Fredholm equation of the second kind\n",
    "\n",
    "$$\n",
    "f(x) = \\sin(\\pi x)  + \\frac{1}{2} \\int_0^1\\! f(t) \\, dt\n",
    "$$\n",
    "\n",
    "Here $a, b = 0, 1$, $\\lambda = \\dfrac{1}{2}$, the kernel is $K(x, t) = 1$ and the right-hand side $g(x) = \\sin(\\pi x)$.\n",
    "\n",
    "In fact, the exact solution is (В. А. Попов, Сборник задач по интегральным уравнениям, 2006, стр. 5)\n",
    "\n",
    "$$\n",
    "f(x) = \\sin(\\pi x) + \\frac{2}{\\pi}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the integral, we can use a Gaussian quadrature with the weight function $w(x) = 1$ on $(0, 1)$. Looking at http://dlmf.nist.gov/18.3, and find the corresponding function in *scipy.special* (pay attention to the integration interval).\n",
    "\n",
    "Compare the obtained function values with the true solution for different values of $N$. What value of $N$ can you stop at?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nodes = 1  Error = 0.3633802276324185\n",
      "nodes = 2  Error = 0.02889134205974216\n",
      "nodes = 3  Error = 0.0007657482051929123\n",
      "nodes = 4  Error = 1.0040475654615744e-05\n",
      "nodes = 5  Error = 7.849635628988109e-08\n",
      "nodes = 6  Error = 4.075698140049807e-10\n",
      "nodes = 7  Error = 1.5067889628379886e-12\n",
      "nodes = 8  Error = 3.0384433154848642e-15\n",
      "nodes = 9  Error = 5.087681048627601e-16\n",
      "nodes = 10  Error = 2.596593065790409e-15\n",
      "nodes = 11  Error = 3.3306690738754696e-16\n",
      "nodes = 12  Error = 1.887379141862766e-15\n",
      "nodes = 13  Error = 1.3229834214604202e-15\n",
      "nodes = 14  Error = 7.364386412590295e-16\n"
     ]
    }
   ],
   "source": [
    "def f_calc(n):\n",
    "    x, w = sp.roots_sh_legendre(n)\n",
    "    y = np.linalg.solve(1/2*w-np.eye(n), -np.sin(np.pi*x))\n",
    "    return x, y\n",
    "\n",
    "def f(x):\n",
    "    return np.sin(np.pi*x)+2/np.pi\n",
    "\n",
    "for i in range(1,15):\n",
    "    x3, y = f_calc(i)\n",
    "    error = np.linalg.norm(y - f(x3))\n",
    "    print(\"nodes =\",i, \" Error =\", error)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Хоть уже и не за две точки, но довольно быстро нашли точную функцию.\n",
    "Причем странно, что ошибка может и возвращаться."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2.2\n",
    "(20% of the grade)\n",
    "\n",
    "An obvious issue with the privious result for $f(x)$ that it returns the solution on a fixed set of points. We do not control precise positions of these points.\n",
    "\n",
    "1. First, let's try to interpolate the values obtained in the previous task to a uniform grid of length 50. You may use any interpolation method. Compare the interpolation values with exact solution values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nodes = 50   Error = 6.064731346164768e-07\n",
      "nodes = 100   Error = 3.846727635110707e-08\n",
      "nodes = 150   Error = 1.0667468090355614e-08\n",
      "nodes = 200   Error = 2.408805675817542e-09\n",
      "nodes = 250   Error = 9.855878407141404e-10\n",
      "nodes = 300   Error = 5.002044818902517e-10\n",
      "nodes = 350   Error = 2.41931122585167e-10\n",
      "nodes = 400   Error = 1.4708994757377066e-10\n",
      "nodes = 450   Error = 8.048525232856181e-11\n",
      "nodes = 500   Error = 5.696557414837399e-11\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0xe484922e88>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.interpolate import make_interp_spline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "xx = np.linspace(0, 1, 50)\n",
    "for i in range(50,550,50):\n",
    "    x, y = f_calc(i)\n",
    "    interpolation = make_interp_spline(x, y)\n",
    "    print(\"nodes =\", i, \"  Error =\", np.linalg.norm(f(xx) - interpolation(xx)))\n",
    "    \n",
    "plt.plot(xx, interpolation(xx), label=\"Interpolation\")\n",
    "plt.plot(xx, f(xx), '*', label=\"Real_value\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Довольно медленная сходимость по сравнению с изначальной сеткой."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Now use the following formula to calculate the function at points of the same uniform grid.\n",
    "$$\n",
    "f(x) = g(x) + \\lambda \\sum_j^N w_j\\, K(x, t_j)\\, f(t_j)\n",
    "$$\n",
    "Again, compare the interpolation values with the exact solution values, and also with the direct interpolation method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nodes = 1   Error = 2.5694862310799444\n",
      "nodes = 2   Error = 0.1444567102987107\n",
      "nodes = 3   Error = 0.0031261539569578723\n",
      "nodes = 4   Error = 3.549844210868821e-05\n",
      "nodes = 5   Error = 2.482272748421641e-07\n",
      "nodes = 6   Error = 1.1765526149404918e-09\n",
      "nodes = 7   Error = 4.027444266765912e-12\n",
      "nodes = 8   Error = 7.746143079195815e-15\n",
      "nodes = 9   Error = 9.805224261780596e-16\n",
      "nodes = 10   Error = 5.632672503515322e-15\n",
      "nodes = 11   Error = 9.805224261780596e-16\n",
      "nodes = 12   Error = 3.1401849173675502e-15\n",
      "nodes = 13   Error = 2.546262077003306e-15\n",
      "nodes = 14   Error = 1.6764000044290905e-15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def f_unif(x, y):\n",
    "    _, w = sp.roots_sh_legendre(len(y))\n",
    "    return np.sin(np.pi*x)+(1/2*w @ y)\n",
    "\n",
    "for i in range(1,15):\n",
    "    x4, y4 = f_calc(i)\n",
    "    print(\"nodes =\", i, \"  Error =\", np.linalg.norm(f(xx) - f_unif(xx, y4)))\n",
    "    \n",
    "plt.plot(xx, abs(f_unif(xx, y4)- f(xx)))\n",
    "plt.ylabel(\"Unifrom grid error\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь все хорошо и скорость сходимости равномерной сетки упирается в скорость сходимости метода на его собственной сетке."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(xx, abs(f_unif(xx, y4)- interpolation(xx)))\n",
    "plt.ylabel(\"Res from methods\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как и просили разность методов, непонятно только что отсюда можно полезного извлечь."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
